find_path(LIBSSH2_INCLUDE_DIR libssh2.h)
find_library(LIBSSH2_LIBRARY NAMES ssh2 libssh2)

if(LIBSSH2_INCLUDE_DIR)
  file(STRINGS "${LIBSSH2_INCLUDE_DIR}/libssh2.h" libssh2_version_str REGEX
    "^#define[\t ]+LIBSSH2_VERSION_NUM[\t ]+0x[0-9][0-9][0-9][0-9][0-9][0-9].*")

  string(REGEX REPLACE "^.*LIBSSH2_VERSION_NUM[\t ]+0x([0-9][0-9]).*$" "\\1"
    LIBSSH2_VERSION_MAJOR "${libssh2_version_str}")
  string(REGEX REPLACE "^.*LIBSSH2_VERSION_NUM[\t ]+0x[0-9][0-9]([0-9][0-9]).*$" "\\1"
    LIBSSH2_VERSION_MINOR  "${libssh2_version_str}")
  string(REGEX REPLACE "^.*LIBSSH2_VERSION_NUM[\t ]+0x[0-9][0-9][0-9][0-9]([0-9][0-9]).*$" "\\1"
    LIBSSH2_VERSION_PATCH "${libssh2_version_str}")

  string(REGEX REPLACE "^0(.+)" "\\1" LIBSSH2_VERSION_MAJOR "${LIBSSH2_VERSION_MAJOR}")
  string(REGEX REPLACE "^0(.+)" "\\1" LIBSSH2_VERSION_MINOR "${LIBSSH2_VERSION_MINOR}")
  string(REGEX REPLACE "^0(.+)" "\\1" LIBSSH2_VERSION_PATCH "${LIBSSH2_VERSION_PATCH}")

  set(LIBSSH2_VERSION "${LIBSSH2_VERSION_MAJOR}.${LIBSSH2_VERSION_MINOR}.${LIBSSH2_VERSION_PATCH}")
endif()

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(LibSSH2
  FOUND_VAR LIBSSH2_FOUND
  VERSION_VAR LIBSSH2_VERSION
  REQUIRED_VARS LIBSSH2_LIBRARY LIBSSH2_INCLUDE_DIR
  FAIL_MESSAGE DEFAULT_MSG)

mark_as_advanced(
  LIBSSH2_INCLUDE_DIR
  LIBSSH2_LIBRARY
  LIBSSH2_VERSION_MAJOR
  LIBSSH2_VERSION_MINOR
  LIBSSH2_VERSION_PATCH
  LIBSSH2_VERSION)

if(LIBSSH2_FOUND)
  find_package(ZLIB REQUIRED)
  find_package(OpenSSL REQUIRED)
  add_library(LibSSH2::LibSSH2 UNKNOWN IMPORTED)
  set_target_properties(LibSSH2::LibSSH2 PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${LIBSSH2_INCLUDE_DIR}"
    IMPORTED_LOCATION "${LIBSSH2_LIBRARY}"
    IMPORTED_LINK_INTERFACE_LIBRARIES "ZLIB::ZLIB;OpenSSL::SSL;OpenSSL::Crypto"
    IMPORTED_LINK_INTERFACE_LANGUAGES "C")
endif()
